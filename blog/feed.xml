<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://halfpastyellow.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://halfpastyellow.com/blog/" rel="alternate" type="text/html" /><updated>2021-02-02T15:52:42+01:00</updated><id>https://halfpastyellow.com/blog/feed.xml</id><title type="html">Half Past Yellow | Blog</title><subtitle>Game Development and other HPY Happenings</subtitle><author><name>Half Past Yellow</name></author><entry><title type="html">Meet: The Carpenter</title><link href="https://halfpastyellow.com/blog/2021/02/03/Meet-the-Carpenter.html" rel="alternate" type="text/html" title="Meet: The Carpenter" /><published>2021-02-03T16:00:00+01:00</published><updated>2021-02-03T16:00:00+01:00</updated><id>https://halfpastyellow.com/blog/2021/02/03/Meet-the-Carpenter</id><content type="html" xml:base="https://halfpastyellow.com/blog/2021/02/03/Meet-the-Carpenter.html"></content><author><name>Remy</name></author></entry><entry><title type="html">Happy holidays!</title><link href="https://halfpastyellow.com/blog/2020/12/18/Happy-Holidays.html" rel="alternate" type="text/html" title="Happy holidays!" /><published>2020-12-18T16:00:00+01:00</published><updated>2020-12-18T16:00:00+01:00</updated><id>https://halfpastyellow.com/blog/2020/12/18/Happy-Holidays</id><content type="html" xml:base="https://halfpastyellow.com/blog/2020/12/18/Happy-Holidays.html">&lt;p&gt;
What a year it's been... If you're reading this, it means that, despite everything that 2020 has thrown at us, you too have made it through this uniquely challenging year. We know the blog's been a little quiet recently but worry not, we've still been very much hard at work! We will definitely have something more to show you come January!
&lt;/p&gt;

&lt;p&gt;
Until then, from everyone here at Half Past Yellow, we wish you and those you hold dear a happy and &lt;i&gt;hygellig&lt;/i&gt; holiday season! Here's to a better 2021 for all of us and we'll catch you again after the fireworks!
&lt;/P&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/5/Tree_Light.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Do not try this at home&lt;/span&gt;</content><author><name>Remy</name></author><summary type="html">What a year it's been... If you're reading this, it means that, despite everything that 2020 has thrown at us, you too have made it through this uniquely challenging year. We know the blog's been a little quiet recently but worry not, we've still been very much hard at work! We will definitely have something more to show you come January!</summary></entry><entry><title type="html">Controlling the Sun</title><link href="https://halfpastyellow.com/blog/2020/11/19/Day-Night-Cycle.html" rel="alternate" type="text/html" title="Controlling the Sun" /><published>2020-11-19T16:00:00+01:00</published><updated>2020-11-19T16:00:00+01:00</updated><id>https://halfpastyellow.com/blog/2020/11/19/Day-Night-Cycle</id><content type="html" xml:base="https://halfpastyellow.com/blog/2020/11/19/Day-Night-Cycle.html">&lt;p&gt;
Up until now you've seen bright and sunny images of our island but what if we told you there was another side to it? Let there be... Night! 
&lt;/p&gt;

&lt;p&gt;A core feature of our game is a day/night cycle that has different gameplay opportunities depending on the time of day. Not only was it important to us to have each time of day to look and feel distinct from the others, they needed to also transition nicely from one to the next. Oh, and also you need to be able to see what you're doing when it's dark.&lt;/P&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/4/full_cycle.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Hello darkness my old friend...&lt;/span&gt; 

&lt;p&gt;
During normal gameplay each distinct time of day in the game lasts several minutes - so don't worry, there's plenty of time to explore and get things done while it's still light out!
&lt;/P&gt;

&lt;p&gt;
What we're essentially doing is defining specific times of day and setting it up for the look we want. Then during gameplay we interpolate between the current phase's settings and the next one based on the time in-game. We have split the day into six phases: Morning, Noon, Afternoon, Dusk, Night, and Late Night. In our case, Late Night is indefinite and doesn't need to transition into Morning otherwise it would probably make sense to also have a Dawn phase.
&lt;/p&gt;

&lt;p&gt;
The settings we are defining to provide the biggest visual impact between the phases are:
&lt;ul&gt;
  &lt;li&gt; The Sun Light
  &lt;ul&gt;
	&lt;li&gt;Color
	&lt;li&gt;Direction
  &lt;/ul&gt;
  &lt;li&gt; Fog
  &lt;ul&gt;
	&lt;li&gt;Color
	&lt;li&gt;Density
  &lt;/ul&gt;
  &lt;li&gt; Post Processing
  &lt;ul&gt;
	&lt;li&gt; Color Correction
	&lt;li&gt; Vignette
  &lt;/ul&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
&lt;img class=&quot;img-fluid bordered&quot; src=&quot;https://halfpastyellow.com/blog/img/posts/4/all_tod.png&quot; alt=&quot;Demo Image&quot;&gt;
&lt;/div&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;The difference is like night and day!&lt;/span&gt; 


&lt;p&gt;
As you can see, some settings change quite significantly from one phase to the next but it doesn't feel quite so drastic in-game since the gradual interpolation handles it all for us very nicely. Night time clearly stands out over the rest, and that's certainly intentional seeing as most of the time players will be out during the day and taking nightfall as a signal to rest and prepare for the next day.
&lt;/p&gt;

&lt;p&gt;
That's all, folks! It's a bit of a short post this time around since there's not much more to say and the images pretty much speak for themselves. It's probably worth mentioning that configuring every setting for each phase can be very time consuming and we've spent many hours (and will probably continue spending many more!) making small adjustments here and there to ensure that everything looks right no matter the time.
&lt;/p&gt;

&lt;p&gt;As always, if you have any specific questions or comments about any of this, just pop on in to our Discord server and we'll be more than happy to oblige! With that, I'll leave you with a bonus clip of a very important night time activity. Good night!
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/4/firefly.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt;</content><author><name>Remy</name></author><summary type="html">Up until now you've seen bright and sunny images of our island but what if we told you there was another side to it? Let there be... Night!</summary></entry><entry><title type="html">Meet: The Sailor</title><link href="https://halfpastyellow.com/blog/2020/10/29/Sailor-Showcase.html" rel="alternate" type="text/html" title="Meet: The Sailor" /><published>2020-10-29T16:00:00+01:00</published><updated>2020-10-29T16:00:00+01:00</updated><id>https://halfpastyellow.com/blog/2020/10/29/Sailor-Showcase</id><content type="html" xml:base="https://halfpastyellow.com/blog/2020/10/29/Sailor-Showcase.html">&lt;p&gt;
It's time to meet The Sailor! The character that you will be playing as in our decreasingly secretive next game.
&lt;/P&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/3/sailor.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Awkward...&lt;/span&gt; 

&lt;p&gt;
While we'll still keep a lot of the narrative and background stuff under wraps at the moment (as the work is still in progress and subject to change), we'd like to showcase some of the visual aspects and early concept designs of our protagonist.
&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Early Concept Art&lt;/h2&gt;
&lt;p&gt;
Looking at some of our first concepts for the sailor, it's clear our lead artist Casper nailed down certain key elements of the character very early on.
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img class=&quot;img-fluid bordered&quot; src=&quot;https://halfpastyellow.com/blog/img/posts/3/earlyconcepts.png&quot; alt=&quot;Demo Image&quot;&gt;
&lt;/div&gt;

&lt;p&gt;
A couple iterations later, softening the edges, tweaking the proportions and losing the shoes, we ended up with the design we have today. It was important for us to convey the playfulness and tone of the game almost immediately with how the player character looked while still allowing for a range of expressiveness and personality when needed.
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
&lt;img class=&quot;img-fluid bordered&quot; src=&quot;https://halfpastyellow.com/blog/img/posts/3/c5.png&quot; alt=&quot;Demo Image&quot;&gt;
&lt;/div&gt;

&lt;p&gt;
Drawing a concept and designing a character is one thing but of course we had to translate it to 3D, which is often a lot easier said than done! Luckily for us, Casper was also the one responsible for doing that, so really he only had himself to blame here.

&lt;h2 class=&quot;section-heading&quot;&gt;2D Inspirations in 3D&lt;/h2&gt;
&lt;p&gt;
We took a lot of inspiration from traditional 2D animation, namely playing with scaling and proportions of moving parts commonly referred to as &lt;i&gt;squash and stretch&lt;/i&gt;. Not only did this help sell the motion of our character but it also once again reinforced our toony visuals. Casper had to rig and skin the character quite unconventionally to allow for this but that's a more technical post for another time!
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/3/jump.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Squish, squash and jiggle.&lt;/span&gt; 

&lt;p&gt;
If you scrub through these videos frame-by-frame you can see some very questionable single-frame poses as part of the character's animation. Definitely not realistic and somewhat nightmare inducing but when you play it back at normal speed it's all of a sudden playful and bouncy - magic!
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/3/runningman.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Not stopped by floppy socks.&lt;/span&gt; 

&lt;p&gt;
We're also making use of both scaling and simple 2D sprites to animate The Sailor's mouth and eyes. This gives us a lot of control over the key elements of The Sailor's face, allowing us to be very expressive and convey a lot of personality to an otherwise simple character.
&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;The Pipe&lt;/h2&gt;

&lt;p&gt;
As an additional bonus, one morning Casper came to the rest of us and outlined specific pipe behaviour that he claims came to him in a dream. Here at Half Past Yellow we're all about achieving our pipe dreams so of course we had to implement it. The gist of it is that the pipe looks most interesting as a silhouette in profile view instead of head on in front of The Sailor's face or behind his head. As The Sailor moves around and rotates relative to the camera, the pipe tries its best to stay in profile as much as it can. It's very subtle and I'm sure it will be unnoticed by almost everyone, but now you know! It can be our shared little secret.
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/3/piperotate.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Ceci n'est pas une pipe.&lt;/span&gt; 

&lt;h2 class=&quot;section-heading&quot;&gt;Moving On&lt;/h2&gt;
&lt;p&gt;
Designing a solid character visual that reacts and also controls well is truly a gift that keeps on giving and we're very happy to have put the effort in quite early in our development. Not only is it immensely satisfying to move around the world, but it is also very appealing to watch as The Sailor fluidly and without hesitation spreads mischief and creates clutter wherever they roam. On the other hand, we have definitely lost some (significant?) productivity aimlessly jumping around so the jury is still out on whether this has been the right move for us production-wise.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/3/jumparound.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;No 'sea-legs' here.&lt;/span&gt; 

&lt;p&gt;
In any case, we're very excited and can't wait for you to all to experience it for yourselves! Stay tuned for more previews and sneak peeks, and don't forget to follow us on our socials below if you haven't already!
&lt;/p&gt;</content><author><name>Remy</name></author><summary type="html">It's time to meet The Sailor! The character that you will be playing as in our decreasingly secretive next game.</summary></entry><entry><title type="html">Flow Like Water</title><link href="https://halfpastyellow.com/blog/2020/10/15/Flow-Like-Water.html" rel="alternate" type="text/html" title="Flow Like Water" /><published>2020-10-15T17:00:00+02:00</published><updated>2020-10-15T17:00:00+02:00</updated><id>https://halfpastyellow.com/blog/2020/10/15/Flow-Like-Water</id><content type="html" xml:base="https://halfpastyellow.com/blog/2020/10/15/Flow-Like-Water.html">&lt;p&gt;
Welcome to the second part of our water shader overview! In this part we will be going over how we added some interactive effects to the water, giving it a lot more life. If you haven't checked out part one yet, you can do so right &lt;a href=&quot;/blog/2020/10/01/Yet-Another-Stylised-Water-Shader.html&quot;&gt;here&lt;/a&gt;.
&lt;/P&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/2/splishsplosh.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Splish splosh.&lt;/span&gt; 

&lt;p&gt;The two interactive features we'll be going over are the dynamic flow introduced by other objects and the simple splash effect when something enters the water. We can see both effects in the above starfish bullying clip.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Dynamic Flow&lt;/h2&gt;

&lt;p&gt;
The dynamic flow effect is created by sampling from a &lt;i&gt;Flow Map&lt;/i&gt; and consequently manipulating the UV coordinates that I'm using for the various texture samples outlined in &lt;a href=&quot;/blog/2020/10/01/Yet-Another-Stylised-Water-Shader.html&quot;&gt;part one&lt;/a&gt;. I create and update the &lt;i&gt;Flow Map&lt;/i&gt; through a combination of two methods I've found online. I've taken the method of flow UVs from the same &lt;a href=&quot;https://catlikecoding.com/unity/tutorials/flow/&quot; target=&quot;_blank&quot;&gt;Catlike Coding tutorial&lt;/a&gt; I pointed to previously and combined it with &lt;a href=&quot;https://www.patreon.com/posts/24192529&quot; target=&quot;_blank&quot;&gt;this Minions Art tutorial&lt;/a&gt; about using particles to simulate a wake as an object moves through the water.
&lt;/P&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/2/flowmap.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;The most questionable of liquids.&lt;/span&gt; 

&lt;p&gt;
Instead of using the particles to render a texture directly onto the water as in the Minions Art tutorial, I am additively rendering these &lt;i&gt;Flow Particles&lt;/i&gt; to the &lt;i&gt;Flow Map&lt;/i&gt; texture every frame and then blurring and reducing the existing flow. This allows for the water's flow to change and react over time as long as there are &lt;i&gt;Flow Particles&lt;/i&gt; being emitted. That is essentially the key to the effect - objects that come into contact with the water will start emitting &lt;i&gt;Flow Particles&lt;/i&gt; resulting in an ever-changing &lt;i&gt;Flow Map&lt;/i&gt;.
&lt;/P&gt;

&lt;p&gt;
Since we aren't rendering the &lt;i&gt;Flow Particles&lt;/i&gt; directly, I am storing some flow information in the &lt;i&gt;Flow Particle&lt;/i&gt; texture, resulting in the strange purple-ish color you can see in the debug render above.
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
&lt;img class=&quot;img-fluid bordered&quot; src=&quot;https://halfpastyellow.com/blog/img/posts/2/flowParticleComposite.png&quot; alt=&quot;Demo Image&quot;&gt;
&lt;/div&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Weird.&lt;/span&gt;

&lt;p&gt;
The &lt;i&gt;Flow Particle&lt;/i&gt; texture is a composite of some information needed for the flow, stored in each of the channels (there is one free/unused channel). R - U speed, G - V speed, B/A - Intensity. Besides masking the flow and giving it a shape, another trick I'm using the intensity channel for is that I can selectively add newer, more &quot;intense&quot; particles to the &lt;i&gt;Flow Map&lt;/i&gt; allowing me to &quot;overwrite&quot; what was previously there. You can see this happen when a new object enters the water as their entry ripple moves over the existing flow. 
&lt;/P&gt;

&lt;p&gt;
In addition to the &lt;i&gt;Flow Particles&lt;/i&gt; that are emitted by moving objects, I am also constantly emitting some particles as long as the objects are in the water. This helps to be a little more convincing since water in real life is rarely still and would flow around the object. For both types of emission I am using the same texture on the particles. The particles are randomly rotated and scaling when added to each other so it already looks quite random and does not need any texture variations.
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/2/stationaryFlow.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Don't pee in the pool.&lt;/span&gt;

&lt;p&gt;
Lastly, I am replacing the water color with the same foam color as before when the flow intensity reaches a certain threshold. This creates a cool trail behind the moving obejcts and gives the whole effect a bit of an organic, natural motion while still maintaining the toony look.
&lt;/P&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/2/flowfoam.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Neat.&lt;/span&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Entry Splashing&lt;/h2&gt;
&lt;p&gt;
The water entry effect is arguably the simplest part of them all yet is also very much the cherry on top. Once an object enters the water, we just emit some particles where they entered. That's it! Granted, one of the particles we emit is a specific &lt;i&gt;Flow Particle&lt;/i&gt; that creates the expanding ripple effect. The other particles emitted are the &quot;splash&quot; - they are unlit and the same color as the foam for consistency. While simple, it adds a lot to the physicality of the water and provides a strong visual indicator for the start of the responsive water interaction.
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/2/entryEffect.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Some more splish and a little more splosh.&lt;/span&gt;

&lt;p&gt;
What's interesting to note that although not expressly intending it, there is a foam ring that develops around the entry point due to how the flow intensity changes with how we have implemented the dynamic flow and the how the entry ripple particle expands. Awesome!
&lt;/P&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;End&lt;/h2&gt;
&lt;p&gt;
And there you have it - a brief look at what goes into creating a complete effect like this. Here at Half Past Yellow we're firm believers in experimentation and pushing our own boundaries and we take a lot of pride in that extra step of polish. Although it might not always come easy or quick, once we see the results we are grateful for having put in the effort! Of course there's always more we can add to it, but we're happy leaving it here for now.
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/2/starfishParty.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Pool party!&lt;/span&gt;

&lt;p&gt;
I hope this writeup provided some useful insight into the pieces that make up this specific visual and that some of you other game devs out there can take the techniques mentioned here to create similar effects of your own. As always, write us on our socials if you have any comments, questions, suggestions!&lt;/P&gt;

&lt;p&gt; Also please share with us other examples of &quot;stylised realism&quot; effects somewhat like this - we can't get enough of this stuff and would love to see more!
&lt;/p&gt;</content><author><name>Remy</name></author><summary type="html">Welcome to the second part of our water shader overview! In this part we will be going over how we added some interactive effects to the water, giving it a lot more life. If you haven't checked out part one yet, you can do so right here.</summary></entry><entry><title type="html">Yet Another Stylised Water Shader</title><link href="https://halfpastyellow.com/blog/2020/10/01/Yet-Another-Stylised-Water-Shader.html" rel="alternate" type="text/html" title="Yet Another Stylised Water Shader" /><published>2020-10-01T17:00:00+02:00</published><updated>2020-10-01T17:00:00+02:00</updated><id>https://halfpastyellow.com/blog/2020/10/01/Yet-Another-Stylised-Water-Shader</id><content type="html" xml:base="https://halfpastyellow.com/blog/2020/10/01/Yet-Another-Stylised-Water-Shader.html">&lt;p&gt;
We've had some folks asking about how I put together the stylised water shader shown in this here tweet, so we thought it'd be a good idea to give a general overview of how it's done!
&lt;/P&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Yet another stylised water shader.&lt;a href=&quot;https://twitter.com/hashtag/screenshotsaturday?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#screenshotsaturday&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/madewithunity?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#madewithunity&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/gamedev?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#gamedev&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/indiedev?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#indiedev&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/unity3d?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#unity3d&lt;/a&gt; &lt;a href=&quot;https://t.co/WGkM2CRtIU&quot;&gt;pic.twitter.com/WGkM2CRtIU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Remy Stuurwold (@R3mzo) &lt;a href=&quot;https://twitter.com/R3mzo/status/1251463311503360011?ref_src=twsrc%5Etfw&quot;&gt;April 18, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


&lt;p&gt;
We wanted something different from the common cel-shaded stylised toon water look so we developed this semi-realistic, 'in-between' water visual for our game. The aim of this post is not necessarily a tutorial but to give a conceptual overview of how you could use some or all of these techniques to accomplish something similar. I'm also not claiming to be particularly original or clever with how it's been done - there are so many others out there with amazing, in-depth resources that are crucial for me being able to put something like this together in the first place and I'll be linking to some of them too.&lt;/p&gt;

&lt;p&gt;
The entire effect is comprised of several distinct features that come together to sell the look and feel of cool, refreshing water that still fits with our game's art style. Some of these features are based in reality while others are complete artistic liberty and we think the interplay between these two concepts makes for a playful, fresh and interesting visual that matches the overall tone of the game.
&lt;/P&gt;

&lt;p&gt;
We are using Unity as our engine of choice, and I personally prefer manually tinkering with the shader code, but the concepts outlined here should be generally applicable in any game engine or shader tool. The water object itself is simply a plane that intersects the terrain with the shader applied. It's a bit of a long post so without further ado, let's get to it! 
&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Color and Light Absorption&lt;/h2&gt;
&lt;p&gt;
Color seems like a good place to start. The key here is to keep it looking somewhat convincing while providing us with a lot of control. We're still using a physically-based lighting calculation with Smoothness and Metallic values to get that realistic vibe so we plug in some blue Albedo to kick us off. This will be our &lt;i&gt;Surface Color&lt;/i&gt;.
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img class=&quot;img-fluid bordered&quot; src=&quot;https://halfpastyellow.com/blog/img/posts/1/albedo.png&quot; alt=&quot;Demo Image&quot;&gt;
&lt;/div&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;What a fantastic start.&lt;/span&gt;

&lt;p&gt;
Mmmm, blue... In order to make it look a little less like plastic and a little more like water, we need to be able to see through it! To do this, I'm grabbing the screen space texture before the water is rendered as well as the depth texture which we will need very shortly.
&lt;/p&gt;

&lt;p&gt;
If we ignore the physically based shading and simply sample the pre-water texture and multiply it by the water color to get the underwater color we would get this:
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
&lt;img class=&quot;img-fluid bordered&quot; src=&quot;https://halfpastyellow.com/blog/img/posts/1/simpleTint2.png&quot; alt=&quot;Demo Image&quot;&gt;
&lt;/div&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;More watery, but we can do a lot better.&lt;/span&gt;

&lt;p&gt;
 To get it looking more realistic, we need to tint the color of everything underwater by how much water is between it and the surface. Conceptually, color in the real world exists because the object absorbs all light of other wavelengths and reflects back only the frequencies of light that we perceive as its color. We use this concept to absorb more of the inverse water color from the pre-water color the more water there is between the bottom and the surface at that point from the camera's perspective. Oof, that sentence is &lt;i&gt;dense&lt;/i&gt;. Let's go through it.
&lt;/p&gt;

&lt;p&gt;
First, I take the inverse of the water color, which I'll call the &lt;i&gt;Absorption Color&lt;/i&gt;. Then, I calculate the &lt;i&gt;Absorption Value&lt;/i&gt; which controls how much color absorption there is. The &lt;i&gt;Absorption Value&lt;/i&gt; is calculated from the view-space depth difference between the surface and the bottom of the pool. This depth value can be kept linear or modified to get different absorption falloffs. For some creative control, I am also multiplying the depth by a tweak value I call &lt;i&gt;Absorption Strength&lt;/i&gt;. I then multiply the &lt;i&gt;Absorption Color&lt;/i&gt; by this calculated &lt;i&gt;Absorption Value&lt;/i&gt; to get what I call the &lt;i&gt;Subtractive Color&lt;/i&gt;.
&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;	&lt;span class=&quot;n&quot;&gt;fixed3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absorptionColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;float3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absorptionVal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_AbsorptionStrength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depthVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;float3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subtractiveColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absorptionColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absorptionVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
If we were to render the &lt;i&gt;Subtractive Color&lt;/i&gt; now, this is what we get:
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
&lt;img class=&quot;img-fluid bordered&quot; src=&quot;https://halfpastyellow.com/blog/img/posts/1/fantasea.png&quot; alt=&quot;Demo Image&quot;&gt;
&lt;/div&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Is this the real life?&lt;/span&gt;

&lt;p&gt;
It's orange. Surely this is the opposite of what we want - correct! Let's now take the color sampled from the screen texture and subtract the &lt;i&gt;Subtractive Color&lt;/i&gt; from it. What we will get is the absorbed color of everthing under the surface based on how deep the water is from the camera's perspective. Here I am also playing with the &lt;i&gt;Absorption Strength&lt;/i&gt; tweak value:
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/1/underwater.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Now we're getting somewhere!&lt;/span&gt;

&lt;p&gt;
Note how we still get some of the brighter areas of the ground texture coming through in areas of higher absorption giving the whole thing a bit more visual depth and interest.
&lt;/p&gt;

&lt;p&gt;
We're almost there now. It can look pretty dark at high &lt;i&gt;Absorption Strength&lt;/i&gt; values so let's now add this underwater color to the &lt;i&gt;Surface Color&lt;/i&gt; we already have. A little bit of tweaking and &lt;b&gt;BOOM&lt;/b&gt; we finally get the look we want!
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img class=&quot;img-fluid bordered&quot; src=&quot;https://halfpastyellow.com/blog/img/posts/1/finalcolor.png&quot; alt=&quot;Demo Image&quot;&gt;
&lt;/div&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Refreshing.&lt;/span&gt;

&lt;p&gt;
Now that we've got the base color done, this is a good foundation to add the next few features of our water. Of course we're not limited with rendering just water in this way. With different colors and tweak values we're able to represent as many questionable liquids as we'd like!
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/1/questionablecolors.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Disco Juice!&lt;/span&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Surface Normals and Refraction&lt;/h2&gt;

&lt;p&gt;
Next up, we'll give the surface some definition with animated normals. Water is almost never completely still (and our brains know this!) so by just having the surface normals animate even a little bit can give a huge impact for the presentation of water. This will also provide the basis for refracting everything underneath the water and really sell the look. Since we don't have any refraction yet, the surface normals are mostly visible in how the specular lighting is reflected on the surface of the water.
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/1/normals.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Smoothy/Bumpy&lt;/span&gt;

&lt;p&gt;
For this entire section, I'm going to have to direct you to &lt;a href=&quot;https://catlikecoding.com/unity/tutorials/flow/&quot; target=&quot;_blank&quot;&gt;this tutorial collection by Catlike Coding&lt;/a&gt; that I followed and referred to extensively. They have done such a great job detailing how to go about creating a seamlessly animating texture for a liquid flow effect and also a complete water tutorial with refraction. Generally, I can't recommend Catlike Coding enough - there's so much quality and depth to the tutorials that when I'm researching something related to a particular shader effect, I'm almost always going to end up there at one point.
&lt;/p&gt;

&lt;p&gt;
Our surface is now animating but if you look at everything underneath the water it doesn't look quite right because it's all still very static. Once we add refraction and offset the UVs that we are using to sample for the &lt;i&gt;Underwater Color&lt;/i&gt;, we get a nicely convincing result.
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/1/refraction.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Sea legs.&lt;/span&gt; 

&lt;p&gt;
As you can see, changing the normal tiling and refraction strength can drastically alter the look of the water. Again, we're able to tweak the the normals and the refraction strength independently for maximum control even though it wouldn't be strictly &quot;realistic&quot; to do so - just set it up with whatever looks best!
&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Depth Foam&lt;/h2&gt;
&lt;p&gt;
We have a fairly realistic looking water shader at this point. It's time to toon it up a bit with the depth foam. The foam effect is essentially a mask that we use to either return the color we have so far, or a specific flat foam color. This technique is very commonly used in a lot of stylised toon water visuals.
&lt;/p&gt;

&lt;p&gt;
Our mask is made of two parts. The first part is a simple depth threshold. The second part is another depth threshold but with additional thresholded scrolling noise textures also applied to it. These two parts are combined to take the maximum value between them which is then used as the final foam mask.
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/1/foam.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;The foaming ring of water!&lt;/span&gt; 

&lt;p&gt;
For such a simple effect, it really has quite an impact to the overall tone and style of the water. It is immediately obvious that &quot;true realism&quot; is not the goal here despite everything else about the water leaning that way. Also note that since the foam is a depth effect, we can put anything in the water and it all &quot;just works!&quot;
&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/1/finalfoam.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Beach please.&lt;/span&gt; 

&lt;h2 class=&quot;section-heading&quot;&gt;Caustics&lt;/h2&gt;
&lt;p&gt;
Caustics are the light patterns visible on the ground under the water due to the refraction of light from the surface. There are a lot of different techniques online on how this effect can be accomplished, ranging in complexity and realism. I went for a very simple approach here, as we only need a lick of realism. 
&lt;/p&gt;

&lt;p&gt;
A fantastic starting point to understanding caustics and how to go about implementing it is &lt;a href=&quot;https://www.alanzucconi.com/2019/09/13/believable-caustics-reflections/&quot; target=&quot;_blank&quot;&gt;this tutorial by Alan Zucconi&lt;/a&gt;. His many tutorials are also a great resource and cover a wide range of topics in game development - definitely check this one out too.
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/1/causticsOnly.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;2spooky4me&lt;/span&gt; 


&lt;p&gt;
Similar to how we did the foam, the caustics pattern is made by using a texture scrolling over itself to create the movement. This texture is then sampled using the world space XZ coordinates of the underwater geometry, multiplied by the light color, and added to the &lt;i&gt;Underwater Color&lt;/i&gt;. We've essentially just projected the caustics texture straight down onto all the underwater geometry. The trickiest part here is actually correctly sampling the shadow mask so that the caustics don't appear in the shaded areas but that will certainly be engine specific and out of scope for us here.
&lt;/p&gt;

&lt;p&gt;
Let's now turn back on the rest of the water and our look is complete!
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/1/caustics.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt; 
&lt;span class=&quot;caption text-muted&quot;&gt;Nice.&lt;/span&gt; 

&lt;br&gt;
&lt;p&gt;
Thanks for making all the way through! I hope this was a good general overview of how we achieved this particular look for the water. Let us know if this was informative and you'd like to see more of this in the future or if you have any other comments on how we gone done did this.
&lt;/p&gt;

&lt;p&gt; 
There's quite a bit here already so in the next part we'll explore how we made the water interactive with:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt; Dynamic Flow
  &lt;li&gt; Entry/Exit splashes
&lt;/ul&gt;

&lt;p&gt;
Be sure to hit us up on our socials or sign up to our newsletter so you don't miss out!
&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;video class=&quot;video-fluid bordered&quot; autoplay loop controls muted src=&quot;https://halfpastyellow.com/blog/img/posts/1/final.mp4&quot; type =&quot;video/mp4&quot;&gt;&lt;/&gt;
&lt;/div&gt;</content><author><name>Remy</name></author><summary type="html">We've had some folks asking about how I put together the stylised water shader shown in this here tweet, so we thought it'd be a good idea to give a general overview of how it's done!</summary></entry></feed>